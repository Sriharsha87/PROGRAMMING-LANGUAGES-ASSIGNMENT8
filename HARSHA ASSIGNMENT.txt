
                                                 ## BOARD.TXT CODE
package com.crackerBarrel;

import java.util.Arrays;

public class Boards {
    private int score;
    public boolean[] pegs;

    public Boards() {
        this.pegs = new boolean[20];
        Arrays.fill(this.pegs, false);
        this.score = 20;
    }

    public Boards(int[] filled) {
        this();
        int[] var2 = filled;
        int var3 = filled.length;

        for(int var4 = 0; var4 < var3; ++var4) {
            int p = var2[var4];
            this.pegs[p] = true;
            --this.score;
        }

    }

    public Boards(int i) {
        this.pegs = new boolean[20];
        Arrays.fill(this.pegs, true);
        this.score = 0;
        this.remove(i);
    }

    public Boards(Boards board) {
        this.pegs = Arrays.copyOf(board.pegs, 20);
        this.score = board.score;
    }

    public boolean canApplyMove(Moves m) {
        return this.pegs[m.from] && this.pegs[m.over] && !this.pegs[m.to];
    }

    public void applyMove(Moves m) {
        if (this.canApplyMove(m)) {
            this.remove(m.over);
            this.movePiece(m.from, m.to);
        }

    }

    public int getScore() {
        return this.score;
    }

    private void remove(int i) {
        if (this.pegs[i]) {
            this.pegs[i] = false;
            ++this.score;
        }
    }

    private void movePiece(int src, int dest) {
        if (this.pegs[src] && !this.pegs[dest]) {
            this.pegs[src] = false;
            this.pegs[dest] = true;
        }

    }

    public String toString() {
        StringBuilder s = new StringBuilder(this.score + " : [");
        boolean[] var2 = this.pegs;
        int var3 = var2.length;

        for(int var4 = 0; var4 < var3; ++var4) {
            boolean b = var2[var4];
            s.append(b ? "1," : "0,");
        }

        s.append("]");
        return s.toString();
    }

    public String toTriangle() {
        String s = "";
        s = s + "    4    \n";
        s = s + "   3 5   \n";
        s = s + "  2 4 6  \n";
        s = s + " 1 3 5 7 \n";
        s = s + "0 2 4 6 8\n";
        char[] cs = s.toCharArray();
        cs[4] = (char)(this.pegs[0] ? 88 : 79);
        cs[13] = (char)(this.pegs[1] ? 88 : 79);
        cs[15] = (char)(this.pegs[2] ? 88 : 79);
        cs[22] = (char)(this.pegs[3] ? 88 : 79);
        cs[24] = (char)(this.pegs[4] ? 88 : 79);
        cs[26] = (char)(this.pegs[5] ? 88 : 79);
        cs[31] = (char)(this.pegs[6] ? 88 : 79);
        cs[33] = (char)(this.pegs[7] ? 88 : 79);
        cs[35] = (char)(this.pegs[8] ? 88 : 79);
        cs[37] = (char)(this.pegs[9] ? 88 : 79);
        cs[40] = (char)(this.pegs[10] ? 88 : 79);
        cs[42] = (char)(this.pegs[11] ? 88 : 79);
        cs[44] = (char)(this.pegs[12] ? 88 : 79);
        cs[46] = (char)(this.pegs[13] ? 88 : 79);
        cs[48] = (char)(this.pegs[14] ? 88 : 79);
        return new String(cs);
    }
}
                                                             ## MAIN.TXT CODE
B





package com.crackerBarrel;

import java.util.List;

public class Main {

    public static void main(String[] args) 
{
          Boards board = new Boards();
        System.out.println(board.toTriangle());

       
        for (int i = 0; i < 5; i++) 
          {

            Boards boards = new Boards(i);
            List<Moves> pegMoves = Solver.solve(boards);
            System.out.println("=========");
            System.out.println("=========");
            System.out.println();
            System.out.println("Option " + i + ":");
            System.out.println(boards.toTriangle());

            
            for (Moves move : pegMoves) 
              {
                boards.applyMove(move);

                System.out.println();
                System.out.println(move.toString());
                System.out.println(boards.toTriangle());
            }
        }
    }
}



                                                                  ##MOVES.TXT CODE
package com.crackerBarrel;

public class Moves {
    public int from;
    public int over;
    public int to;
    public static Moves[] moves = new Moves[]{new Moves(0, 1, 3), new Moves(0, 2, 5), new Moves(1, 3, 6), new Moves(1, 4, 8), new Moves(2, 4, 7), new Moves(2, 5, 9), new Moves(3, 6, 10), new Moves(3, 7, 12), new Moves(4, 7, 11), new Moves(4, 8, 13), new Moves(5, 8, 12), new Moves(5, 9, 14), new Moves(3, 4, 5), new Moves(6, 7, 8), new Moves(7, 8, 9), new Moves(10, 11, 12), new Moves(11, 12, 13), new Moves(12, 13, 14)};

    public Moves(int f, int o, int t) {
        this.from = f;
        this.over = o;
        this.to = t;
    }

    public String toString() {
        return String.format("(%d,%d,%d)", this.from, this.over, this.to);
    }
}










                                                          ## SOLVER.TXT  CODE




package com.crackerBarrel;
import java.util.ArrayList;
import java.util.List;
public class Solver {
    public Solver() {
    }

    public static List<Moves> solve(Boards pegboard) {
        if (pegboard.getScore() == 14) {
            return new ArrayList();
        } else {
            Moves[] var1 = Moves.moves;
            int var2 = var1.length;

            for(int var3 = 0; var3 < var2; ++var3) {
                Moves move = var1[var3];
                if (pegboard.canApplyMove(move)) {
                    Boards nextBoard = new Boards(pegboard);
                    nextBoard.applyMove(move);
                    List<Moves> otherMoves = solve(nextBoard);
                    if (otherMoves != null) {
                        otherMoves.add(0, move);
                        return otherMoves;
                    }
                }
            }

            return null;
        }
    }
}



